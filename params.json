{"name":"Mason","tagline":"Mason.js for creating a perfect grid with jQuery.","body":"## MasonJS\r\nMason.js is a jQuery plugin that allows you to create a perfect grid of elements.<br/><br/>\r\nThis is not Masonry, or Isotope or Gridalicious. Mason fills in those ugly gaps, and creates a perfectly filled space.\r\n\r\n##USE\r\n<br/><br/>\r\n<strong>Basic CSS </strong>\r\n<pre>\r\n#container {\r\n\twidth: 100%\r\n\tposition: relative;\r\n}\r\n.box {\r\n\tfloat: left;\r\n\tbackground-color: #00ffff;\r\n\tposition: relative;\r\n}\r\n</pre>\r\n<br/><br/>\r\n<strong>Call Mason.js ( BASIC )</strong>\r\n<pre>\r\n$(\"#container\").mason({\r\n\titemSelector: \".box\",\r\n\tratio: 1.5,\r\n\tsizes: [\r\n\t\t[1,1],\r\n\t\t[1,2],\r\n\t\t[2,2]\r\n\t]\r\n});\r\n</pre>\r\n\r\n##OPTIONS\r\nMason.js has a number of options:\r\n<pre>\r\n$(\"#container\").mason({\r\n\titemSelector: \".box\",\r\n\tratio: 1.5,\r\n\tsizes: [\r\n\t\t[1,1],\r\n\t\t[1,2],\r\n\t\t[2,2]\r\n\t],\r\n\tcolumns: [\r\n\t\t[0,480,1],\r\n\t\t[480,780,2],\r\n\t\t[780,1080,3],\r\n\t\t[1080,1320,4],\r\n\t\t[1320,1680,5]\r\n\t],\r\n\tpromoted: [\r\n\t\t['class_name', 2, 1],\r\n\t\t['class_name', 2, 3],\r\n\t\t['class_name', 3, 3],\r\n\t],\r\n\tfiller: {\r\n\t\titemSelector: '.fillerBox',\r\n\t\tfiller_class: 'custom_filler',\r\n\t\tkeepDataAndEvents: false\r\n\t},\r\n\tlayout: 'fluid',\r\n\tgutter: 10\r\n},function(){\r\n\tconsole.log(\"COMPLETE!\")\r\n});\r\n</pre>\r\n<ul>\r\n\t<li><strong>itemSelector</strong>\r\n\t\t<ul>\r\n\t\t\t<li>the element that makes up your grid</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>ratio</strong>\r\n\t\t<ul>\r\n\t\t\t<li>The ratio is a number that is used to create the blocks based on column count and width. This is based on the number of columns requested and the browser width.</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>sizes</strong>\r\n\t\t<ul>\r\n\t\t\t<li>Sizes are an array of sizes you wish to use in your grid. These are composed of block numbers. ( ex: [1,1] means 1 block high, 1 block wide )</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>columns</strong>\r\n\t\t<ul>\r\n\t\t\t<li>columns are an array of break points for your columns. Think of this like media queries. start small and grow. They should be formatted as [min,max,cols]</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>filler</strong>\r\n\t\t<ul>\r\n\t\t\t<li>itemSelector: This describes the elements to be used to fill in blank spaces. This will default to the original itemSelector if there is nothing</li>\r\n\t\t\t<li>filler_class: This is a class given to filler elements within the grid, used for cleaning up if a grid set to fluid</li>\r\n\t\t\t<li>keepDataAndEvents: Mason creates a clone of the filler elements before adding them to the grid, this boolean (true/false) property tells Mason to retain the events and data that have already been bound to the filler elements</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>promoted</strong>\r\n\t\t<ul>\r\n\t\t<li>Accepts an array of ['CLASS_NAME', WIDTH, HEIGHT] these items will be forced to those dimentsions.</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>Layout</strong>\r\n\t\t<ul>\r\n\t\t\t<li>There are two layouts, fluid and fixed. Mason will default to fixed. Fluid means it will be responsive.</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>Callback</strong>\r\n\t\t<ul>\r\n\t\t\t<li>You can add a callback function to Mason to notify you when the grid has completed building.</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li><strong>Gutter</strong>\r\n\t\t<ul>\r\n\t\t\t<li>Allows you to add spacing between the elements, think of this as a margin.</li>\r\n\t\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n## DESTROY\r\nAt times you may want to destroy the mason object and no longer track window changes, to do this assign the mason grid to a variable such as `var mason` and when you're ready to destroy just call `mason.destroy()` this will remove all listeners on the mason object and you can remove the grid or elements without any ill effects.\r\n\r\n## Install\r\n1. `npm install`\r\n\r\n2. `bower install`\r\n\r\n## Running\r\ncd into project and run `gulp`\r\n\r\n## Building\r\ncd into project \r\n\r\n1. run `gulp dist`\r\n\r\n2. run `gulp finish_dist`\r\n\r\n## Examples\r\nLook at the public folder for examples.\r\n\r\n\r\n","google":"A-41580075-1","note":"Don't delete this file! It's used internally to help with page regeneration."}